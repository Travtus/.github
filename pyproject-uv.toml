[tool.uv]
package = false

[tool.ruff]
line-length = 100
select = [
    # flake8-builtins
    "A",
    # flake8-annotations
    "ANN",
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # pydocstyle
    "D",
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # isort
    "I",
    # pep8-naming
    "N",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # Ruff-specific rules
    "RUF",
    # flake8-bandit
    "S",
    # flake8-print
    "T20",
    # pyupgrade
    "UP",
    # pycodestyle
    "W"
]

ignore  = [
    # Missing type annotation for `self` in method
    "ANN101",
    # Missing type annotation for `cls` in method
    "ANN102",
    # Missing docstring in public <module|class|method|function>
    "D1",
    # Import block is un-sorted or un-formatted
    "I001",
    # Module shadows a Python standard-library module
    "A005",
    # Do not perform function call
    "B008"
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
ignore_missing_imports = true
plugins = [
    "pydantic.mypy"
]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "*.dtos.*"
ignore_errors = true

[tool.ruff.per-file-ignores]
"test*.py" = [
    # Use of `assert` detected
    "S101",
    # Possible hardcoded password assigned to
    "S105",
    # Possible hardcoded password assigned to argument
    "S106"
]
"conftest.py" = [
    # Possible hardcoded password assigned to
    "S105",
    # Possible hardcoded password assigned to argument
    "S106"
]
"*tools.py" = [
    # Line too long
    "E501",
]

[tool.coverage.run]
omit = [
    # omit interface codes
    "*/interfaces/*",
    # omit config classes
    "*/config*.py",
    # omit tests
    "*/tests/*",
    # omit factories
    "*/factories.py",
    "*.pyx"
]

[tool.taskipy.tasks]
ruff = "uv run python -m ruff check ."
mypy = "uv run python -m mypy ."
format = "uv run python -m ruff format"
lint-all = "uv run python -m ruff format; uv run python -m ruff check .; uv run python -m mypy .;"
tests = "uv run pytest"
cov = "coverage run -m pytest; coverage report -m --fail-under=100"
snapshots-fix = "uv run pytest --inline-snapshot=fix"
snapshots-create = "uv run pytest --inline-snapshot=create"
clean = "uv run python -c \"import shutil, glob; [shutil.rmtree(p, ignore_errors=True) for pattern in ['**/build', '**/dist', '**/*.egg-info', '**/.pytest_cache', '**/.mypy_cache', '**/.tox', '**/__pycache__', '.ruff_cache'] for p in glob.glob(pattern, recursive=True)]\""

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
